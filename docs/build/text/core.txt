core
****

* model_setup

* eigensolvers

* classify_modes

* forced_problem


model_setup
===========

This module contains the functions for setting up the WFE model.

This includes:
   * Creating the relevant *dof* dict data

   * Applying the boundary conditions

   * Sorting M, K and dofs to left and right faces

   * Creating *node* dict data

pywfe.core.model_setup.generate_dof_info(dof: dict, axis=0)

   Generates the *dof* dictionary, including which face each dof is
   on. Also rolls sets the waveguide axis and created index array if
   none given.

   Parameters:
      **dof** : dict
         DESCRIPTION.

      **axis** : TYPE, optional
         DESCRIPTION. The default is 0.

   Returns:
      **dof** : TYPE
         DESCRIPTION.

pywfe.core.model_setup.apply_boundary_conditions(K, M, dof, null, nullf)

   Applies boundary conditions according to null constraint matrices.
   Resorts and removes degrees of freedom as needed. (NOT FINISHED)

   Parameters:
      **K** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **M** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **dof** : dict
         dof dictionary.

      **null** : ndarray
         (ndof, ndof) sized array of type float.

      **nullf** : ndarray
         (ndof, ndof) sized array of type float.

   Returns:
      **K** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **M** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **dof** : dict
         dof dictionary.

pywfe.core.model_setup.order_system_faces(K, M, dof)

   Parameters:
      **K** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **M** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **dof** : dict
         dof dictionary.

   Returns:
      **K** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **M** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **dof** : dict
         dof dictionary.

pywfe.core.model_setup.substructure_matrices(K, M, dof)

   Creates dictionaries for the submatrices of K and M

   Parameters:
      **K** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **M** : ndarray
         (ndof, ndof) sized array of type float or complex.

      **dof** : dict
         dof dictionary.

   Returns:
      **K_sub** : dict
         dictionary of substructured stiffness matrices.

      **M_sub** : dict
         dictionary of substructured mass matrices.

pywfe.core.model_setup.create_node_dict(dof)

   Creates node dictionary for nodes on the left face of the model

   Parameters:
      **dof** : dict
         dof dictionary.

   Returns:
      **node** : dict
         node dictionary.


eigensolvers
============

This module contains different solvers for the WFE eigenproblem.

pywfe.core.eigensolvers.transfer_matrix(DSM)

   Classical transfer matrix formulation of the WFE eigenproblem.

   The transfer function is defined as

      \mathbf{T} = \begin{bmatrix} -D_{LR}^{-1} D_{LL} & D_{LR}^{-1}
      \\ -D_{RL}+D_{RR} D_{LR}^{-1} D_{LL} & -D_{RR} D_{LR}^{-1}
      \end{bmatrix}

   which leads to the eigenvalue problem

      T \mathbf{\Phi} = \lambda \mathbf{\Phi}

   The left eigenvectors can be found by considering \mathbf{T}^{T}

   Parameters:
      **DSM** : (N,N) ndarray (float or complex)
         The dynamic stiffness matrix of the system.  NxN array of
         type float or complex.

   Returns:
      **vals** : ndarray
         1-D array of length N type complex.

      **left_eigenvectors** : ndarray
         NxN array of type float or complex. Column i is vector
         corresponding to vals[i]

      **right_eigenvectors** : ndarray
         NxN array of type float or complex. Column i is vector
         corresponding to vals[i]

pywfe.core.eigensolvers.polynomial(DSM)

   [unfinished] Polynomial form of the eigenproblem

   Parameters:
      **DSM** : (N,N) ndarray (float or complex)
         The dynamic stiffness matristrucaxisym-x of the system.  NxN
         array of type float or complex.

   Returns:
      **vals** : ndarray
         1-D array of length N type complex.

      **left_eigenvectors** : ndarray
         NxN array of type float or complex. Column i is vector
         corresponding to vals[i]

      **right_eigenvectors** : ndarray
         NxN array of type float or complex. Column i is vector
         corresponding to vals[i]


classify_modes
==============

This module contains the functionality needed to sort eigensolutions
of the WFE method into positive and negative going waves.

pywfe.core.classify_modes.classify_wavemode(f, eigenvalue, eigenvector, threshold)

   Identify if a wavemode is positive going or negative going

   Parameters:
      **f** : float
         frequency of eigensolution.

      **eigenvalue** : complex
         Eigenvalue to be checked.

      **eigenvector** : nodarray, complex
         Corresponding eigenvector.

      **threshold** : float
         Threshold for classification. How close to unity does an
         eigenvalue have to be?

   Returns:
      **direction** : str
         "'right'" or "'left'".

pywfe.core.classify_modes.sort_eigensolution(f, eigenvalues, right_eigenvectors, left_eigenvectors)

   Sort the eigensolution into positive and negative going waves

   Parameters:
      **f** : float
         Frequency of eigensolution.

      **eigenvalues** : ndarray, complex
         Eigenvalues solved at this frequency.

      **right_eigenvectors** : ndarray, complex
         Right eigenvectors solved at this frequency.

      **left_eigenvectors** : TYPE
         Left eigenvectors solved at this frequency..

   Returns:
      named tuple
         Eigensolution tuple.


forced_problem
==============

This module contains the functionality needed to apply forces to a WFE
model.

pywfe.core.forced_problem.calculate_excited_amplitudes(eigensolution, force)

   Calculates the directly excited amplitudes subject to a given force
   and modal solution.

   Parameters:
      **eigensolution** : namedtuple
         eigensolution.

      **force** : np.ndarray
         force vector.

   Returns:
      **e_plus** : np.ndarray
         directly excited modal amplitudes (positive).

      **e_minus** : np.ndarray
         directly excited modal amplitudes (negative).

pywfe.core.forced_problem.generate_reflection_matrices(eigensolution, A_right, B_right, A_left, B_left)

   Calculates the reflection matrices from boundary matrices.

   Parameters:
      **eigensolution** : TYPE
         DESCRIPTION.

      **A_right** : np.ndarray
         A matrix on the right boundary.

      **B_right** : np.ndarray
         B matrix on the right boundary.

      **A_left** : np.ndarray
         A natrix on the left boundary.

      **B_left** : np.ndarray
         B matrix on the left boundary.

   Returns:
      **R_right** : np.ndarray
         Right reflection matrix.

      **R_left** : np.ndarray
         Left reflection matrix.

pywfe.core.forced_problem.calculate_propagated_amplitudes(e_plus, e_minus, k_plus, L, R_right, R_left, x_r, x_e=0)

   Calculates the ampltiudes of waves after propagation to response
   point

   Parameters:
      **e_plus** : np.ndarray
         positive directly excited amplitudes.

      **e_minus** : np.ndarray
         negative directly excited amplitudes.

      **k_plus** : np.ndarray
         wavenumber array.

      **L** : float
         Length of waveguide.

      **R_right** : np.ndarray
         Right reflection matrix.

      **R_left** : np.ndarray
         Left reflection matrix.

      **x_r** : float, np.ndarray
         Response distance.

      **x_e** : float,
         Excitation distance. The default is 0.

   Returns:
      **b_plus** : np.ndarray
         positive propagated amplitudes.

      **b_minus** : np.ndarray
         negative propagated amplitudes.

pywfe.core.forced_problem.calculate_modal_displacements(eigensolution, b_plus, b_minus)

   Calculates the displacement of each mode (last axis is modal)

   Parameters:
      **eigensolution** : namedtuple
         eigensolution.

      **b_plus** : np.ndarray
         positive propagated amplitudes.

      **b_minus** : np.ndarray
         negative propagated amplitudes.

   Returns:
      **q_j_plus** : np.ndarray
         positive going modal displacements.

      **q_j_minus** : np.ndarray
         negative going modal displacements.

pywfe.core.forced_problem.calculate_modal_forces(eigensolution, b_plus, b_minus)

   Calculates the internal forces of each mode (last axis is modal)

   Parameters:
      **eigensolution** : namedtuple
         eigensolution.

      **b_plus** : np.ndarray
         positive propagated amplitudes.

      **b_minus** : np.ndarray
         negative propagated amplitudes.

   Returns:
      **f_j_plus** : np.ndarray
         Positive going modal forces.

      **f_j_minus** : np.ndarray
         Negative going modal forces.
