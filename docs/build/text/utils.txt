utils
*****

* io_utils

* comsol_loader

* frequency_sweep

* modal_assurance


io_utils
========

This module contains the functionality needed to save and load
pywfe.Model objects


comsol_loader
=============

This module contains the functionality needed to convert COMSOL data
extracted from MATLAB LiveLink into a pywfe.Model class.

pywfe.utils.comsol_loader.load_comsol(folder, axis=0, logging_level=20, solver='transfer_matrix')

   Parameters:
      **folder** : string
         path to the folder containing the COMSOL LiveLink data.

      **axis** : int, optional
         Waveguide axis. The default is 0.

      **logging_level** : int, optional
         Logging level. The default is 20 (info).

   Returns:
      **model** : pywfe.model class
         a pywfe model.

pywfe.utils.comsol_loader.comsol_i2j(filename, skiprows=0)

   Converts complex 'j' imaginary unit from COMSOL to python 'j'

   Parameters:
      **filename** : string
         filename to convert.

      **skiprows** : int, optional
         see numpy loadtxt. The default is 1.

   Returns:
      None.

frequency_sweep
===============

This module contains the  fucntion for calculating various quantities
over an array of frequencies for a pywfe.Model object.

pywfe.utils.frequency_sweep.frequency_sweep(model, f_arr, quantities, x_r=0, mac=False, dofs='all')

   Perform a sweep over frequency array, extracting specified
   quatities at each step. Modal assurance criterion can be used to
   track modes through frequency by modeshape similarity

   Parameters:
      **model** : pywfe.Model
         The model to perform the sweep with.

      **f_arr** : np.ndarray float
         frequency array.

      **quantities** : list of str type
         a list of strings specifying the quantities to be calculated.
         These are: - phi_plus: the (positive going) eigenvectors -
         excited_amplitudes: see *pywfe.Model.excited_amplitudes* -
         propagated_amplitudes: see
         *pywfe.Model.propagated_amplitudes* - modal_displacements:
         see *pywfe.Model.modal_displacements* - wavenumbers: see
         *pywfe.Model.wavenumbers* - displacements: see
         *pywfe.Model.displacements* - forces: see
         *pywfe.Model.forces*

      **x_r** : float, np.ndarray, optional
         response distance(s). The default is 0.

      **mac** : bool, optional
         Use the modal assurance criterion to sort waves. The default
         is False.

      **dofs** : dofs, optional
         The selected degrees of freedom. See
         *pywfe.Model.dofs_to_inds*. The default is 'all'.

   Returns:
      **output** : dict
         Dictionary of outputs for specified quantities.


modal_assurance
===============

This module contains functions for sorting frequency sweept data by
mode index

pywfe.utils.modal_assurance.mac_matrix(modes_prev, modes_next)

   Compute the Modal Assurance Criterion (MAC) matrix.

Created on Tue Aug 22 11:24:28 2023

@author: Austen
